// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: api/posts.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PostsServiceClient is the client API for PostsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostsServiceClient interface {
	// posts
	CreatePost(ctx context.Context, in *PostData, opts ...grpc.CallOption) (*Post, error)
	GetPostByUUID(ctx context.Context, in *GetByUUIDRequest, opts ...grpc.CallOption) (*Post, error)
	UpdatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Post, error)
	// comments
	CreateComment(ctx context.Context, in *CommentData, opts ...grpc.CallOption) (*Comment, error)
	GetCommentByUUID(ctx context.Context, in *GetByUUIDRequest, opts ...grpc.CallOption) (*Comment, error)
	// claps
	CreateClap(ctx context.Context, in *ClapRequst, opts ...grpc.CallOption) (*Clap, error)
}

type postsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPostsServiceClient(cc grpc.ClientConnInterface) PostsServiceClient {
	return &postsServiceClient{cc}
}

func (c *postsServiceClient) CreatePost(ctx context.Context, in *PostData, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, "/posts.PostsService/CreatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsServiceClient) GetPostByUUID(ctx context.Context, in *GetByUUIDRequest, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, "/posts.PostsService/GetPostByUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsServiceClient) UpdatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, "/posts.PostsService/UpdatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsServiceClient) CreateComment(ctx context.Context, in *CommentData, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, "/posts.PostsService/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsServiceClient) GetCommentByUUID(ctx context.Context, in *GetByUUIDRequest, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, "/posts.PostsService/GetCommentByUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postsServiceClient) CreateClap(ctx context.Context, in *ClapRequst, opts ...grpc.CallOption) (*Clap, error) {
	out := new(Clap)
	err := c.cc.Invoke(ctx, "/posts.PostsService/CreateClap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostsServiceServer is the server API for PostsService service.
// All implementations must embed UnimplementedPostsServiceServer
// for forward compatibility
type PostsServiceServer interface {
	// posts
	CreatePost(context.Context, *PostData) (*Post, error)
	GetPostByUUID(context.Context, *GetByUUIDRequest) (*Post, error)
	UpdatePost(context.Context, *Post) (*Post, error)
	// comments
	CreateComment(context.Context, *CommentData) (*Comment, error)
	GetCommentByUUID(context.Context, *GetByUUIDRequest) (*Comment, error)
	// claps
	CreateClap(context.Context, *ClapRequst) (*Clap, error)
	mustEmbedUnimplementedPostsServiceServer()
}

// UnimplementedPostsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPostsServiceServer struct {
}

func (UnimplementedPostsServiceServer) CreatePost(context.Context, *PostData) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedPostsServiceServer) GetPostByUUID(context.Context, *GetByUUIDRequest) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostByUUID not implemented")
}
func (UnimplementedPostsServiceServer) UpdatePost(context.Context, *Post) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (UnimplementedPostsServiceServer) CreateComment(context.Context, *CommentData) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedPostsServiceServer) GetCommentByUUID(context.Context, *GetByUUIDRequest) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentByUUID not implemented")
}
func (UnimplementedPostsServiceServer) CreateClap(context.Context, *ClapRequst) (*Clap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClap not implemented")
}
func (UnimplementedPostsServiceServer) mustEmbedUnimplementedPostsServiceServer() {}

// UnsafePostsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostsServiceServer will
// result in compilation errors.
type UnsafePostsServiceServer interface {
	mustEmbedUnimplementedPostsServiceServer()
}

func RegisterPostsServiceServer(s grpc.ServiceRegistrar, srv PostsServiceServer) {
	s.RegisterService(&PostsService_ServiceDesc, srv)
}

func _PostsService_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServiceServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts.PostsService/CreatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServiceServer).CreatePost(ctx, req.(*PostData))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostsService_GetPostByUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByUUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServiceServer).GetPostByUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts.PostsService/GetPostByUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServiceServer).GetPostByUUID(ctx, req.(*GetByUUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostsService_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServiceServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts.PostsService/UpdatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServiceServer).UpdatePost(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostsService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts.PostsService/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServiceServer).CreateComment(ctx, req.(*CommentData))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostsService_GetCommentByUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByUUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServiceServer).GetCommentByUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts.PostsService/GetCommentByUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServiceServer).GetCommentByUUID(ctx, req.(*GetByUUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostsService_CreateClap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClapRequst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostsServiceServer).CreateClap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/posts.PostsService/CreateClap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostsServiceServer).CreateClap(ctx, req.(*ClapRequst))
	}
	return interceptor(ctx, in, info, handler)
}

// PostsService_ServiceDesc is the grpc.ServiceDesc for PostsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "posts.PostsService",
	HandlerType: (*PostsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePost",
			Handler:    _PostsService_CreatePost_Handler,
		},
		{
			MethodName: "GetPostByUUID",
			Handler:    _PostsService_GetPostByUUID_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _PostsService_UpdatePost_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _PostsService_CreateComment_Handler,
		},
		{
			MethodName: "GetCommentByUUID",
			Handler:    _PostsService_GetCommentByUUID_Handler,
		},
		{
			MethodName: "CreateClap",
			Handler:    _PostsService_CreateClap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/posts.proto",
}
